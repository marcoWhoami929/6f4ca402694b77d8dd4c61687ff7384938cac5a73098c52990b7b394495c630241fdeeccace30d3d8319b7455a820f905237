{"remainingRequest":"C:\\xampp\\htdocs\\vue-cordova-app\\vuejs-cordova-sample\\node_modules\\thread-loader\\dist\\cjs.js!C:\\xampp\\htdocs\\vue-cordova-app\\vuejs-cordova-sample\\node_modules\\babel-loader\\lib\\index.js!C:\\xampp\\htdocs\\vue-cordova-app\\vuejs-cordova-sample\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp\\htdocs\\vue-cordova-app\\vuejs-cordova-sample\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\vue-cordova-app\\vuejs-cordova-sample\\src\\views\\Nfc.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\vue-cordova-app\\vuejs-cordova-sample\\src\\views\\Nfc.vue","mtime":1610388792645},{"path":"C:\\xampp\\htdocs\\vue-cordova-app\\vuejs-cordova-sample\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\vue-cordova-app\\vuejs-cordova-sample\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\vue-cordova-app\\vuejs-cordova-sample\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\vue-cordova-app\\vuejs-cordova-sample\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\vue-cordova-app\\vuejs-cordova-sample\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { nativeAlert } from \"../libs\";\nexport default {\n  name: 'nfc',\n  data: function data() {\n    return {\n      compatible: true,\n      nfc_disabled: false,\n      dialog: false,\n      items: JSON.parse(localStorage.getItem(\"scanHistory\") || \"[]\")\n    };\n  },\n  watch: {\n    items: function items(values) {\n      // Watch push on the items data. If a new item is push save it to the « localStorage ».\n      localStorage.setItem(\"scanHistory\", JSON.stringify(values));\n    }\n  },\n  mounted: function mounted() {\n    // When the view is mounted, register the scan tag event.\n    this.registerTagEvent();\n  },\n  beforeDestroy: function beforeDestroy() {\n    // When the view is destroyed (user leave), unregister the scan tag event, to avoid scanning tag in other view\n    this.unregisterTagEvent();\n  },\n  methods: {\n    registerTagEvent: function registerTagEvent() {\n      // Unregister previously « resume » event listener.\n      document.removeEventListener(\"resume\", this.registerTagEvent, false);\n\n      if (typeof nfc !== \"undefined\") {\n        // Nfc is available, waiting for scan\n        // eslint-disable-next-line\n        nfc.addTagDiscoveredListener(this.displayTagId, this.success, this.error);\n      } else {\n        // Plugin not present or failed to initialized.\n        this.error();\n      }\n    },\n    unregisterTagEvent: function unregisterTagEvent() {\n      // Test if the plugin is defined\n      if (typeof nfc !== \"undefined\") {\n        // eslint-disable-next-line\n        nfc.removeTagDiscoveredListener(this.displayTagId);\n      }\n    },\n    displayTagId: function displayTagId(nfcEvent) {\n      // Decode tag data from the plugin\n      var tag = nfcEvent.tag; // eslint-disable-next-line\n\n      var tagId = nfc.bytesToHexString(tag.id); // Push the new tag to the saved list\n\n      this.items.push(tagId); // Show the tag Id to the user\n\n      nativeAlert(this.$t(\"nfcText.tagSerial\") + \" : \" + tagId);\n    },\n    error: function error(e) {\n      // Manage the state\n      if (e === \"NFC_DISABLED\") {\n        this.compatible = false;\n        this.nfc_disabled = true;\n      } else {\n        this.nfc_disabled = false;\n        this.compatible = false;\n      }\n    },\n    success: function success() {\n      this.compatible = true;\n      this.nfc_disabled = false;\n    },\n    showSettings: function showSettings() {\n      // Trigger the phone settings to enable the Nfc settings\n      // eslint-disable-next-line\n      nfc.showSettings(); // To refresh the state of the nfc, we add a listener to the « resume » event.\n      // The resume event is triggered by cordova when the app is « Resumed ».\n\n      document.addEventListener(\"resume\", this.registerTagEvent, false);\n    }\n  }\n};",{"version":3,"sources":["Nfc.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAAA,WAAA,QAAA,SAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,IADA;AAEA,MAAA,YAAA,EAAA,KAFA;AAGA,MAAA,MAAA,EAAA,KAHA;AAIA,MAAA,KAAA,EAAA,IAAA,CAAA,KAAA,CAAA,YAAA,CAAA,OAAA,CAAA,aAAA,KAAA,IAAA;AAJA,KAAA;AAMA,GATA;AAUA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA,eAAA,MAAA,EAAA;AACA;AACA,MAAA,YAAA,CAAA,OAAA,CAAA,aAAA,EAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA;AACA;AAJA,GAVA;AAgBA,EAAA,OAhBA,qBAgBA;AACA;AACA,SAAA,gBAAA;AACA,GAnBA;AAoBA,EAAA,aApBA,2BAoBA;AACA;AACA,SAAA,kBAAA;AACA,GAvBA;AAwBA,EAAA,OAAA,EAAA;AACA,IAAA,gBADA,8BACA;AACA;AACA,MAAA,QAAA,CAAA,mBAAA,CAAA,QAAA,EAAA,KAAA,gBAAA,EAAA,KAAA;;AAEA,UAAA,OAAA,GAAA,KAAA,WAAA,EAAA;AACA;AACA;AACA,QAAA,GAAA,CAAA,wBAAA,CAAA,KAAA,YAAA,EAAA,KAAA,OAAA,EAAA,KAAA,KAAA;AACA,OAJA,MAIA;AACA;AACA,aAAA,KAAA;AACA;AACA,KAbA;AAcA,IAAA,kBAdA,gCAcA;AACA;AACA,UAAA,OAAA,GAAA,KAAA,WAAA,EAAA;AACA;AACA,QAAA,GAAA,CAAA,2BAAA,CAAA,KAAA,YAAA;AACA;AACA,KApBA;AAqBA,IAAA,YArBA,wBAqBA,QArBA,EAqBA;AACA;AACA,UAAA,GAAA,GAAA,QAAA,CAAA,GAAA,CAFA,CAGA;;AACA,UAAA,KAAA,GAAA,GAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAJA,CAMA;;AACA,WAAA,KAAA,CAAA,IAAA,CAAA,KAAA,EAPA,CASA;;AACA,MAAA,WAAA,CAAA,KAAA,EAAA,CAAA,mBAAA,IAAA,KAAA,GAAA,KAAA,CAAA;AACA,KAhCA;AAiCA,IAAA,KAjCA,iBAiCA,CAjCA,EAiCA;AACA;AACA,UAAA,CAAA,KAAA,cAAA,EAAA;AACA,aAAA,UAAA,GAAA,KAAA;AACA,aAAA,YAAA,GAAA,IAAA;AACA,OAHA,MAGA;AACA,aAAA,YAAA,GAAA,KAAA;AACA,aAAA,UAAA,GAAA,KAAA;AACA;AACA,KA1CA;AA2CA,IAAA,OA3CA,qBA2CA;AACA,WAAA,UAAA,GAAA,IAAA;AACA,WAAA,YAAA,GAAA,KAAA;AACA,KA9CA;AA+CA,IAAA,YA/CA,0BA+CA;AACA;AACA;AACA,MAAA,GAAA,CAAA,YAAA,GAHA,CAKA;AACA;;AACA,MAAA,QAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,KAAA,gBAAA,EAAA,KAAA;AACA;AAvDA;AAxBA,CAAA","sourcesContent":["// Require Cordova plugin : phonegap-nfc\r\n// TODO UPDATE\r\n<template>\r\n  <v-container text-center>\r\n      <span v-if=\"compatible\">\r\n        {{$t(\"nfcText.waitingTag\")}}\r\n        <br>\r\n        <v-dialog v-model=\"dialog\" scrollable>\r\n\r\n          <template v-slot:activator=\"{ on }\">\r\n            <v-btn v-on=\"on\">{{$t(\"nfcText.history\")}}</v-btn>\r\n          </template>\r\n\r\n          <v-card>\r\n            <v-card-title>{{$t(\"nfcText.history\")}}</v-card-title>\r\n            <v-divider></v-divider>\r\n            <v-card-text style=\"height: 300px;\">\r\n                <v-list-item v-for=\"item in items\" v-bind:key=\"item\">\r\n                  <v-list-item-content>\r\n                    <v-list-item-title v-text=\"item\"></v-list-item-title>\r\n                  </v-list-item-content>\r\n                </v-list-item>\r\n                <v-list-item v-if=\"items.length === 0\">\r\n                  <v-list-item-content>\r\n                    <v-list-item-title v-text=\"$t('nfcText.noHistory')\" class=\"text-center\"></v-list-item-title>\r\n                  </v-list-item-content>\r\n                </v-list-item>\r\n            </v-card-text>\r\n          </v-card>\r\n          \r\n        </v-dialog>\r\n      </span>\r\n      <v-btn @click=\"showSettings\" v-else-if=\"nfc_disabled\">{{$t(\"nfcText.showSettings\")}}</v-btn>\r\n      <span v-else>{{$t(\"nfcText.notAvailable\")}}</span>\r\n  </v-container>\r\n</template>\r\n\r\n\r\n<script>\r\n  import {nativeAlert} from \"../libs\";\r\n\r\n  export default {\r\n    name: 'nfc',\r\n    data(){\r\n      return {\r\n        compatible: true,\r\n        nfc_disabled: false,\r\n        dialog: false,\r\n        items: JSON.parse((localStorage.getItem(\"scanHistory\")||\"[]\")),\r\n      }\r\n    },\r\n    watch:{\r\n      items: function (values) {\r\n        // Watch push on the items data. If a new item is push save it to the « localStorage ».\r\n        localStorage.setItem(\"scanHistory\", JSON.stringify(values));\r\n      }\r\n    },\r\n    mounted(){\r\n      // When the view is mounted, register the scan tag event.\r\n      this.registerTagEvent();\r\n    },\r\n    beforeDestroy(){\r\n      // When the view is destroyed (user leave), unregister the scan tag event, to avoid scanning tag in other view\r\n      this.unregisterTagEvent();\r\n    },\r\n    methods: {\r\n      registerTagEvent(){\r\n        // Unregister previously « resume » event listener.\r\n        document.removeEventListener(\"resume\", this.registerTagEvent, false);\r\n\r\n        if (typeof(nfc) !== \"undefined\"){\r\n          // Nfc is available, waiting for scan\r\n          // eslint-disable-next-line\r\n          nfc.addTagDiscoveredListener(this.displayTagId, this.success, this.error);\r\n        }else{\r\n          // Plugin not present or failed to initialized.\r\n          this.error();\r\n        }\r\n      },\r\n      unregisterTagEvent(){\r\n        // Test if the plugin is defined\r\n        if (typeof(nfc) !== \"undefined\") {\r\n          // eslint-disable-next-line\r\n          nfc.removeTagDiscoveredListener(this.displayTagId);\r\n        }\r\n      },\r\n      displayTagId(nfcEvent){\r\n        // Decode tag data from the plugin\r\n        let tag = nfcEvent.tag;\r\n        // eslint-disable-next-line\r\n        let tagId = nfc.bytesToHexString(tag.id);\r\n\r\n        // Push the new tag to the saved list\r\n        this.items.push(tagId);\r\n\r\n        // Show the tag Id to the user\r\n        nativeAlert(this.$t(\"nfcText.tagSerial\") + \" : \" + tagId);\r\n      },\r\n      error(e){\r\n        // Manage the state\r\n        if(e === \"NFC_DISABLED\"){\r\n          this.compatible = false;\r\n          this.nfc_disabled = true;\r\n        }else{\r\n          this.nfc_disabled = false;\r\n          this.compatible = false;\r\n        }\r\n      },\r\n      success(){\r\n        this.compatible = true;\r\n        this.nfc_disabled = false;\r\n      },\r\n      showSettings(){\r\n        // Trigger the phone settings to enable the Nfc settings\r\n        // eslint-disable-next-line\r\n        nfc.showSettings();\r\n\r\n        // To refresh the state of the nfc, we add a listener to the « resume » event.\r\n        // The resume event is triggered by cordova when the app is « Resumed ».\r\n        document.addEventListener(\"resume\", this.registerTagEvent, false);\r\n      }\r\n    }\r\n  }\r\n</script>\r\n"],"sourceRoot":"src/views"}]}